---
interface Props {
  headings: { slug: string; text: string }[];
}
---

<button class="toggle-toc-btn">≡</button>

<nav class="toc">
  <ul id="toc-list"></ul>
</nav>

<script>
  let isExpanded = false;

  const toggleToc = () => {
    const toc = document.querySelector('.toc');
    const btn = document.querySelector('.toggle-toc-btn');
    
    if (!toc || !btn) return;
    
    isExpanded = !isExpanded;
    
    if (isExpanded) {
      toc.classList.add('expanded');
      btn.textContent = '×';
    } else {
      toc.classList.remove('expanded');
      btn.textContent = '≡';
    }
  };

  // 绑定按钮点击事件
  const toggleBtn = document.querySelector('.toggle-toc-btn');
  if (toggleBtn) {
    toggleBtn.addEventListener('click', toggleToc);
  }

  const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
  const tocList = document.getElementById('toc-list');

  if (tocList) {
    // 跳过第一个标题
    const filteredHeadings = Array.from(headings).slice(1);
    
    filteredHeadings.forEach((heading) => {
      const level = parseInt(heading.tagName.charAt(1));
      const text = heading.textContent || '';
      const id = heading.id || text.toLowerCase().replace(/\s+/g, '-');
      
      heading.id = id;
      
      const li = document.createElement('li');
      li.classList.add(`level-${level}`);
      
      const a = document.createElement('a');
      a.href = `#${id}`;
      a.textContent = text;
      
      // 根据层级设置缩进
      a.style.paddingLeft = `${(level - 2) * 16}px`;
      
      li.appendChild(a);
      tocList.appendChild(li);
    });

  // 自动收起导航栏
  document.addEventListener('click', (e) => {
    const toc = document.querySelector('.toc');
    const btn = document.querySelector('.toggle-toc-btn');
    
    if (toc && btn && e.target instanceof Node) {
      if (!toc.contains(e.target) && !btn.contains(e.target) && isExpanded) {
        toggleToc();
      }
    }
  });

  // 滚动跟踪高亮
  let activeLink: HTMLElement | null = null;
  
  const observer = new IntersectionObserver(
    (entries) => {
      entries.sort((a, b) => b.boundingClientRect.top - a.boundingClientRect.top);
      
      let newActive: HTMLElement | null = null;
      
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          newActive = entry.target as HTMLElement;
        }
      });
      
      if (newActive) {
        const id = (newActive as HTMLElement).id;
        const tocLink = document.querySelector<HTMLAnchorElement>(`.toc a[href="#${id}"]`);
        
        if (tocLink && tocLink !== activeLink) {
          if (activeLink) {
            activeLink.classList.remove('active');
          }
          tocLink.classList.add('active');
          activeLink = tocLink;
          
          // 自动滚动导航栏
          const toc = document.querySelector('.toc');
          if (toc) {
            const linkRect = tocLink.getBoundingClientRect();
            const tocRect = toc.getBoundingClientRect();
            
            if (linkRect.top < tocRect.top || linkRect.bottom > tocRect.bottom) {
              tocLink.scrollIntoView({
                behavior: 'smooth',
                block: 'center'
              });
            }
          }
        }
      }
    },
    {
      rootMargin: '-20% 0px -20% 0px',
      threshold: 0.2
    }
  );

  // 监听所有标题
  headings.forEach((heading) => {
    observer.observe(heading);
  });

  // 增强平滑滚动
  document.querySelectorAll('.toc a').forEach((anchor) => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href'));
      if (target) {
        // 计算偏移量
        const headerHeight = document.querySelector('header')?.clientHeight || 0;
        const offset = headerHeight + 20;
        
        // 获取目标位置
        const targetRect = target.getBoundingClientRect();
        const targetTop = targetRect.top + window.pageYOffset - offset;
        
        // 平滑滚动
        window.scrollTo({
          top: targetTop,
          behavior: 'smooth'
        });
        
        // 更新URL
        history.replaceState(null, '', this.getAttribute('href'));
      }
    });
  });
  }
</script>
